"use strict";(self.webpackChunkdigital_locker=self.webpackChunkdigital_locker||[]).push([[8544],{3905:function(e,n,o){o.d(n,{Zo:function(){return c},kt:function(){return u}});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var d=t.createContext({}),s=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},c=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(o),u=r,g=p["".concat(d,".").concat(u)]||p[u]||m[u]||a;return o?t.createElement(g,i(i({ref:n},c),{},{components:o})):t.createElement(g,i({ref:n},c))}));function u(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=o[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}p.displayName="MDXCreateElement"},5024:function(e,n,o){o.r(n),o.d(n,{assets:function(){return c},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var t=o(7462),r=o(3366),a=(o(7294),o(3905)),i=["components"],l={sidebar_position:1},d="Create Mongodb Container",s={unversionedId:"mongodb/creating-a mongo-container",id:"mongodb/creating-a mongo-container",title:"Create Mongodb Container",description:"The following is an example of using docker secrets and volumes to create a secure MongoDb Container.",source:"@site/docs/mongodb/creating-a mongo-container.md",sourceDirName:"mongodb",slug:"/mongodb/creating-a mongo-container",permalink:"/digital-locker/docs/mongodb/creating-a mongo-container",draft:!1,editUrl:"https://github.com/conradj3/digital-locker/tree/main/docs/mongodb/creating-a mongo-container.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"What is `unplanned` work?",permalink:"/digital-locker/docs/agile/address-unplanned-work"}},c={},m=[{value:"Docker-compose",id:"docker-compose",level:2},{value:"Folder structure",id:"folder-structure",level:2},{value:"Dockerfile and init override",id:"dockerfile-and-init-override",level:2},{value:"Understanding the init override.",id:"understanding-the-init-override",level:3},{value:"Connect via MongoCompass or 3T",id:"connect-via-mongocompass-or-3t",level:2},{value:"Downloads",id:"downloads",level:2}],p={toc:m};function u(e){var n=e.components,o=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-mongodb-container"},"Create Mongodb Container"),(0,a.kt)("p",null,"The following is an example of using docker ",(0,a.kt)("inlineCode",{parentName:"p"},"secrets")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"volumes")," to create a secure MongoDb Container."),(0,a.kt)("h2",{id:"docker-compose"},"Docker-compose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-docker"},'version: "3.8"\nservices:\n  mongodb:\n    build: ./mongodb\n    ports:\n      - 27017:27017\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/mongodb_root_username\n      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_password\n      - MONGO_USERNAME_FILE=/run/secrets/mongodb_username\n      - MONGO_PASSWORD_FILE=/run/secrets/mongodb_password\n      - MONGO_INITDB_DATABASE=admin\n      - MONGO_DATABASE=mydb\n    volumes:\n      - mongodata:/data/db\n    secrets:\n      - mongodb_root_username\n      - mongodb_root_password\n      - mongodb_username\n      - mongodb_password\nsecrets:\n  mongodb_root_username:\n    file: ./mongodb/.mongodb_root_username\n  mongodb_root_password:\n    file: ./mongodb/.mongodb_root_password\n  mongodb_username:\n    file: ./mongodb/.mongodb_username\n  mongodb_password:\n    file: ./mongodb/.mongodb_password\nvolumes:\n  mongodata:\n    external: false\n\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Dont try and mount to a windows file system. A docker volume is required on Windows. You can mount a folder directly to local host using wsl2 but you should be out of the ",(0,a.kt)("inlineCode",{parentName:"p"},"/mnt/c")," and most likely in ",(0,a.kt)("inlineCode",{parentName:"p"},"~\\")))),(0,a.kt)("h2",{id:"folder-structure"},"Folder structure"),(0,a.kt)("p",null,"The following is a good folder structure for working with MongoDb containers."),(0,a.kt)("pre",null,"\u251c\u2500\u2500 \ud83d\udcdd.gitignore \u251c\u2500\u2500 \ud83d\udcdddocker-compose.yaml \u251c\u2500\u2500 \ud83d\udcc1mongodb \u2502   \u251c\u2500\u2500 \ud83d\udcdd.mongodb_password \u2502   \u251c\u2500\u2500 \ud83d\udcdd.mongodb_root_password \u2502   \u251c\u2500\u2500 \ud83d\udcdd.mongodb_root_username \u2502   \u251c\u2500\u2500 \ud83d\udcdd.mongodb_username \u2502   \u251c\u2500\u2500 \ud83d\udcddDockerfile \u2502   \u251c\u2500\u2500 \ud83d\udcddmongo-init.sh"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The . files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"mongodb")," directory should contain your run time secrets which will be mounted as volumes at ",(0,a.kt)("inlineCode",{parentName:"p"},"/run/secrets/<secretname>")," inside the container."))),(0,a.kt)("h2",{id:"dockerfile-and-init-override"},"Dockerfile and init override"),(0,a.kt)("p",null,"We will want to override the ",(0,a.kt)("inlineCode",{parentName:"p"},"/docker-entrypoint-initdb.d/")," with the following mongo-init.sh file and add a Dockerfile to our ",(0,a.kt)("inlineCode",{parentName:"p"},"mongodb")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\nfile_env() {\n    local var="$1"\n    local fileVar="${var}_FILE"\n    local def="${2:-}"\n    if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then\n        echo >&2 "error: both $var and $fileVar are set (but are exclusive)"\n        exit 1\n    fi\n    local val="$def"\n    if [ "${!var:-}" ]; then\n        val="${!var}"\n    elif [ "${!fileVar:-}" ]; then\n        val="$(<"${!fileVar}")"\n    fi\n    export "$var"="$val"\n    unset "$fileVar"\n}\nfile_env "MONGO_USERNAME"\nfile_env "MONGO_PASSWORD"\nmongo -- ${MONGO_INITDB_DATABASE} <<EOF\nconst MONGO_INITDB_ROOT_USERNAME = \'$MONGO_INITDB_ROOT_USERNAME\';\nconst MONGO_INITDB_ROOT_PASSWORD = \'$MONGO_INITDB_ROOT_PASSWORD\';\nconst MONGO_DATABASE = \'$MONGO_DATABASE\';\nconst MONGO_USERNAME = \'$MONGO_USERNAME\';\nconst MONGO_PASSWORD = \'$MONGO_PASSWORD\';\ndb.auth(MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD);\nvar db = db.getSiblingDB(MONGO_DATABASE)\ndb.createUser({user: MONGO_USERNAME, pwd: MONGO_PASSWORD, roles: [{role: \'readWrite\', db: MONGO_DATABASE}]});\nEOF\n')),(0,a.kt)("h3",{id:"understanding-the-init-override"},"Understanding the init override."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"file_env")," will get value of ",(0,a.kt)("inlineCode",{parentName:"p"},'"MONGO_USERNAME"')," from the secret file and export it into the environment of the container."),(0,a.kt)("p",null,"Mongo command will execute the script inside the EOF block. The script helps log in as the root user, create mydb database, then creates a user."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," to pull the image and copy the mongo-init.sh to the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-docker"},"FROM mongo:latest\nADD ./mongo-init.sh /docker-entrypoint-initdb.d/\n")),(0,a.kt)("h2",{id:"connect-via-mongocompass-or-3t"},"Connect via MongoCompass or 3T"),(0,a.kt)("p",null,"The following will be the url to connect to Mongodb container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mongodb://<username>:<password>@mongodb:27017/mydb\n")),(0,a.kt)("p",null,"If your connecting via Windows Host, you'll want to use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mongodb://<username>:<password>@host.docker.internal:27017/mydb\n")),(0,a.kt)("h2",{id:"downloads"},"Downloads"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.mongodb.com/products/compass"},"MongoCompass Community")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://studio3t.com/download/"},"Studio 3T")))}u.isMDXComponent=!0}}]);