"use strict";(self.webpackChunkdigital_locker=self.webpackChunkdigital_locker||[]).push([[460],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},185:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={slug:"AKS",title:"Production Down",authors:["conrad"],tags:["Azure","Kubernetes","Graph","Identity"],hide_table_of_contents:!1},l=void 0,u={permalink:"/digital-locker/blog/AKS",editUrl:"https://github.com/conradj3/digital-locker/tree/main/blog/blog/2022-4-28.mdx",source:"@site/blog/2022-4-28.mdx",title:"Production Down",description:"In short Duke, a shit storm.",date:"2022-04-28T00:00:00.000Z",formattedDate:"April 28, 2022",tags:[{label:"Azure",permalink:"/digital-locker/blog/tags/azure"},{label:"Kubernetes",permalink:"/digital-locker/blog/tags/kubernetes"},{label:"Graph",permalink:"/digital-locker/blog/tags/graph"},{label:"Identity",permalink:"/digital-locker/blog/tags/identity"}],readingTime:3.22,truncated:!0,authors:[{name:"Conrad",title:"Maintainer",url:"https://github.com/conradj3",imageURL:"https://github.com/conradj3.png",key:"conrad"}],frontMatter:{slug:"AKS",title:"Production Down",authors:["conrad"],tags:["Azure","Kubernetes","Graph","Identity"],hide_table_of_contents:!1},nextItem:{title:"Welcome",permalink:"/digital-locker/blog/welcome"}},c={authorsImageUrls:[void 0]},d=[{value:"In short Duke, a shit storm.",id:"in-short-duke-a-shit-storm",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:d};function h(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"in-short-duke-a-shit-storm"},"In short Duke, a shit storm."),(0,a.kt)("p",null,"Thursday morning started just great. We had a deployment into a production Kubernetes cluster failing to pull container images from our Azure Container Registry. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Azure Service Principal")," account secret used by the ",(0,a.kt)("inlineCode",{parentName:"p"},"Kubernetes")," cluster had expired and needed to be renewed."),(0,a.kt)("p",null,"We got around to addressing the new deployment later in the afternoon when many of our staff had left for the day. One might ask why we managed to tackle this problem in the afternoon if it's production? This is because it had no impact on current solutions on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Kubernetes")," and only prevented new feature deployments that were not urgent. So we created a new service principal using the Azure CLI and updated the Kubernetes cluster credentials. Of course, we had to give permissions to the Container Registry to pull images ",(0,a.kt)("inlineCode",{parentName:"p"},"acr pull"),", and we also drained and deallocated nodes in hopes the new credential would allow permission to pull images. This was a mistake, a bad mistake. As we started draining nodes and deallocating and bringing them back online because they would not reboot... we learned we were in the shit."),(0,a.kt)("p",null,"Our applications started experiencing a problem with the core DNS service inside Kubernetes and were routing outside our cluster. We issued a priority incident, eventually after chasing logs, firewalls, and all the fun stuff. We made a call to reboot the Kubernetes Service. Fantastic! After the reboot, all our daemon sets and pods were up, and so was our primary graph service. We decided we were ready to call it for the night, but we were interrupted by a keen team member that they were seeing something extremely odd. Low and behold, the pods came up, but many of the replicas started crashing. "),(0,a.kt)("p",null,'So we had intermittent service of our primary graph service, and we made a call to downgrade the priority. Calls were bouncing from our applications, but at least some were going through. I ended the night in a depressed state as I was sure we could resolve the problem if we continued to stare at the screen and solution. One of our product owners pulled the plug and said, " Let us get back at this tomorrow morning after getting some sleep." Sure enough, we did.'),(0,a.kt)("p",null,"After catching about 4 hours of sleep, because my brain was racking on what could be causing this problem after we all retired for the night, I woke up to take my kids to school. Our team was all present in a call at 8:00 AM on the dot. We learned we had missed a step within the hour while creating the ",(0,a.kt)("inlineCode",{parentName:"p"},"Service Principal"),". It lacked the ",(0,a.kt)("inlineCode",{parentName:"p"},"network contributor")," role to update the Kubernetes Route Tables, which was the root cause of Kubernetes pods were trying to route outside the cluster. After adding ",(0,a.kt)("inlineCode",{parentName:"p"},"network contributor")," all our pods came back to life, and service was restored."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"After describing our mistakes one could reference ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/aks/kubernetes-service-principal?tabs=azure-cli"},"Azure - Kubernetes Service Principals")),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"This is were things went south."))),(0,a.kt)("p",null,"When running the follow command after service principal creation;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"az role assignment create --assignee <appId> --scope <resourceScope> --role Contributor\n")),(0,a.kt)("p",null,"We required both of the scopes receive contributor assignment:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"/subscriptions/",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"guid")),"/resourceGroups/myResourceGroup "),(0,a.kt)("li",{parentName:"ul"},"/subscriptions/",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"guid")),"/resourceGroups/myResourceGroupVnet/providers/Microsoft.Network/virtualNetworks/myVnet")),(0,a.kt)("p",null,'The official wording says "or" but it was an "and" in our environment. Simple, but caused a hell of a headache and crunch session in the moment to try and bring the production services back to a fully restored state. '),(0,a.kt)("p",null,"We attempted to resolve this on our own but several of the credentials and individual rbac prevent a lot of engineers from fixing this due to the ownership of the Service Principal / Subscription roles preventing individuals from adding roles to identity.  We were much relieved when services were restored hope this read might help someone who might encounter this."))}h.isMDXComponent=!0}}]);